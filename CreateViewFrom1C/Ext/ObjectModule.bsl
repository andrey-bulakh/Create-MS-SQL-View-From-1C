#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СервисныеМетоды

Функция СведенияОВнешнейОбработке() Экспорт
  
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка"); //Варианты: "ДополнительнаяОбработка", "ДополнительныйОтчет", "ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов" 
	ПараметрыРегистрации.Вставить("Наименование", "Дополнительная обработка: "+Метаданные().Представление());
	ПараметрыРегистрации.Вставить("Версия", ПолучитьВерсиюОбработки()); //"1.0"
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь); //Варианты: Истина, Ложь
	ПараметрыРегистрации.Вставить("Информация", "Дополнительный обработка: "+Метаданные().Представление());
	ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");// не ниже какой версии БСП подерживается обработка
		
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ДобавитьКоманду(ТаблицаКоманд,
					"Открытие формы обработки ""Создать View""",
					"ОткрытьФормуОтладки",
					"ОткрытиеФормы",  //Использование.  Варианты: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"   
					Ложь,//Показывать оповещение. Варианты Истина, Ложь 
					"");//Модификатор					
					
	ДобавитьКоманду(ТаблицаКоманд,
					"Создать View",
					"СоздатьView",
					"ВызовСерверногоМетода",  //Использование.  Варианты: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"   
					Ложь,//Показывать оповещение. Варианты Истина, Ложь 
					"");//Модификатор
										
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполнения) Экспорт
	
	Если ИдентификаторКоманды = "СоздатьView" Тогда
		СоздатьView();	
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти	
	
#Область ПрограммныйИнтерфейс

Функция ЗагрузитьСтруктуру1С82() Экспорт
	
	//инициализация               	
	ПрефиксСхемы = ПолучитьПрефиксСхемыПоИБ();
	ПрефиксБД = ПолучитьПрефиксБД();
	
	Результат = Новый Массив;
	
	//Создаем структуру хранения	 
	Таблицы = Новый ТаблицаЗначений;
	Таблицы.Колонки.Добавить("Имя");
	Таблицы.Колонки.Добавить("Тип");
	Таблицы.Колонки.Добавить("Назначение");
	Таблицы.Колонки.Добавить("ФизическоеИмя");
	Таблицы.Колонки.Добавить("Поля");
	
	СоздатьПредставлениеДляОбъектаМетаданных("Последовательности", Таблицы);
	СоздатьПредставлениеДляОбъектаМетаданных("ПланыСчетов", Таблицы);
	СоздатьПредставлениеДляОбъектаМетаданных("ЖурналыДокументов", Таблицы);
	СоздатьПредставлениеДляОбъектаМетаданных("Константы", Таблицы);
	СоздатьПредставлениеДляОбъектаМетаданных("РегистрыНакопления", Таблицы);
	СоздатьПредставлениеДляОбъектаМетаданных("РегистрыСведений", Таблицы);	
	СоздатьПредставлениеДляОбъектаМетаданных("РегистрыБухгалтерии", Таблицы);
	СоздатьПредставлениеДляОбъектаМетаданных("Справочники", Таблицы);
	СоздатьПредставлениеДляОбъектаМетаданных("Документы", Таблицы);
	СоздатьПредставлениеДляОбъектаМетаданных("Перечисления", Таблицы);
	СоздатьПредставлениеДляОбъектаМетаданных("ПланыВидовХарактеристик", Таблицы);
	СоздатьПредставлениеДляОбъектаМетаданных("ПланыВидовРасчета", Таблицы);
		
	Для Каждого Таблица из Таблицы  Цикл		
		ЗаполнитьПредставлениеПоОписанию(Таблица, Результат);
		
		Если Таблица.Тип = "РегистрСведений" И Таблица.Назначение = "Основная" Тогда
			СоздатьВиртуальныеТаблицыИтоговРегистраСведений(Результат, Таблицы, Таблица, ПрефиксСхемы);
		ИначеЕсли Таблица.Тип = "РегистрНакопления" И Таблица.Назначение = "Основная" Тогда
			СоздатьВиртуальныеТаблицыИтоговРегистраНакопления(Результат, Таблицы, Таблица, ПрефиксСхемы);
		КонецЕсли;
		
	КонецЦикла;
	
	СоздатьВиртуальныеТаблицыИтоговРегистровБухгалтерии(Результат, ПрефиксСхемы);		  
	
	ИмяТаблицы = ПрефиксСхемы + "." + "_ВидыОбъектов";
	Результат.Добавить("IF OBJECT_ID ('" + ИмяТаблицы + "','U') IS NOT NULL DROP TABLE " + ИмяТаблицы);
	Результат.Добавить("GO" + Символы.ПС);
	Результат.Добавить("CREATE TABLE " + ИмяТаблицы + "(IDОбъекта int PRIMARY KEY, ТипОбъекта nvarchar(25), IDОбъектаБД binary(4), Наименование nvarchar(255), Синоним nvarchar(255)) ");
	Результат.Добавить("GO" + Символы.ПС);
	Для каждого Справочник из Метаданные.Справочники Цикл
		Результат.Добавить(ДобавитьЗаписьОТипе(ИмяТаблицы, Справочник, "Справочник", Справочники[Справочник.Имя].ПустаяСсылка()));
	КонецЦикла;
	Результат.Добавить("GO" + Символы.ПС);
	Для каждого Документ из Метаданные.Документы Цикл		
		ДокументСсылка = Документы[Документ.Имя].ПустаяСсылка();
		Результат.Добавить(ДобавитьЗаписьОТипе(ИмяТаблицы, Документ, "Документ", ДокументСсылка));
	КонецЦикла;
	Результат.Добавить("GO" + Символы.ПС);
	Для каждого Перечисление из Метаданные.Перечисления Цикл		
		// Если у перечисления есть хоть одно значение				
		Для Каждого МетаданныеЗначенияПеречисления из Перечисление.ЗначенияПеречисления Цикл
			ЗначениеПеречисления = Перечисления[Перечисление.Имя][МетаданныеЗначенияПеречисления.Имя];
			Результат.Добавить(ДобавитьЗаписьОТипе(ИмяТаблицы, Перечисление, "Перечисление", ЗначениеПеречисления));
			Прервать;
		КонецЦикла;
	КонецЦикла;
	Результат.Добавить("GO" + Символы.ПС);
		
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьСкрипт(ТекстСкриптаМассив) Экспорт
	AdoConnection = СоздатьADOConnection("DRIVER={SQL Server};SERVER=SERVER;UID=UID;PWD=PWD;DATABASE=DATABASE");
	
	Батч = "";
	Для Каждого Строка Из ТекстСкриптаМассив Цикл
		Если СокрЛП(Врег(Строка)) = "GO" Тогда
			Если Не ПустаяСтрока(Батч) Тогда
				AdoConnection.Execute(Батч);
				Батч = ""
			КонецЕсли;
		Иначе
			Батч = Батч + Символы.ПС + Строка
		КонецЕсли;
	КонецЦикла;
	Если Не ПустаяСтрока(Батч) Тогда
		AdoConnection.Execute(Батч);
	КонецЕсли;
	
	ЗакрытьADOConnection(AdoConnection);
КонецПроцедуры

Функция СоздатьADOConnection(ConnectionString="") Экспорт
	ADOConnection = Новый COMОбъект("ADODB.Connection");
	ADOConnection.ConnectionString = ConnectionString;
	
	ADOConnection.CursorLocation=3;
	ADOConnection.ConnectionTimeout = 120;
	ADOConnection.CommandTimeout = 1200;
			
	Попытка
		ADOConnection.Open();
	Исключение
		ЗаписьЖурналаРегистрации("ОшибкаФормированияView", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ADOConnection = Неопределено;
		Возврат 0;
	КонецПопытки;
	
	ADOConnection.Execute("set dateformat ymd set nocount on");
	Возврат ADOConnection;
КонецФункции	

Функция ЗакрытьADOConnection(ADOConnection) Экспорт
	Если ТипЗнч(ADOConnection) = Тип("COMОбъект") Тогда
		Попытка
			ADOConnection.Close();
		Исключение
			#Если Клиент Тогда
			Сообщить(ОписаниеОшибки(),СтатусСообщения.ОченьВажное);
			#КонецЕсли
		КонецПопытки;
	КонецЕсли; 
	ADOConnection = Неопределено;
КонецФункции	

Процедура СоздатьView() Экспорт
	Попытка
		Скрипт = ЗагрузитьСтруктуру1С82();
		Если ЭтоРабочаяБаза() Тогда 
			ВыполнитьСкрипт(Скрипт);
		КонецЕсли;
	Исключение
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации("ОшибкаФормированияView", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьВерсиюОбработки() Экспорт 
	Возврат "3.0";	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПрефиксСхемыПоИБ()

	СтрокаСоединенияИнформационнойБазы = ВРег(СтрокаСоединенияИнформационнойБазы());
	
	Если СтрокаСоединенияИнформационнойБазы = "SRVR=""My_Server"";REF=""My_Base"";" Тогда 
    	ПрефиксСхемы = "";
	Иначе 
		ПрефиксСхемы = "dbo";
	КонецЕсли;
	
	Возврат ПрефиксСхемы;
	
КонецФункции    

Функция ПолучитьПрефиксБД()

	СтрокаСоединенияИнформационнойБазы = ВРег(СтрокаСоединенияИнформационнойБазы());
	
	Если СтрокаСоединенияИнформационнойБазы = "SRVR=""My_Server"";REF=""My_Base"";" Тогда 
    	ПрефиксБД = "Instance_name.DB_name.dbo.";
	Иначе 
		ПрефиксБД = "";
	КонецЕсли;
	
	Возврат ПрефиксБД;
	
КонецФункции 

Функция ЭтоРабочаяБаза()
	
	СтрокаСоединенияИнформационнойБазы = ВРег(СтрокаСоединенияИнформационнойБазы());
	
	Если СтрокаСоединенияИнформационнойБазы = "SRVR=""My_Server"";REF=""My_Base"";" Тогда 
    	Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьОбъектыМетаданныхВМассив(ОбъектМетаданных, Массив)
	
	Для Каждого Элемент из Метаданные[ОбъектМетаданных] Цикл 	 
		Массив.Добавить(Элемент);
	КонецЦикла;      
	
КонецПроцедуры 

Функция ПолучитьТаблицуЗначенийСтруктурыХраненияБазыДанных(МассивОбъектовМетаданных)

	ТабЗнач = ПолучитьСтруктуруХраненияБазыДанных(МассивОбъектовМетаданных, Истина);  
	МассивОбъектовМетаданных.Очистить();
	
	Возврат ТабЗнач
	
КонецФункции

Функция ПолучитьСоответствиеИменПоля(Поле, Таблица)
	// используется для уникальности номеров по периодичности 
	Если Поле.ФизическоеИмя = "_NumberPrefix" Тогда
		Поле.Имя = "ПрефиксНомера";
	ИначеЕсли Поле.ФизическоеИмя = "_RecordKey" Тогда
		Поле.Имя = "КлючЗаписи";
	ИначеЕсли Поле.ФизическоеИмя = "_Period" Тогда
		Поле.Имя = "Период";
	ИначеЕсли Поле.ФизическоеИмя = "_AccountRRef" Тогда
		Поле.Имя = "Счет";
	ИначеЕсли Поле.ФизическоеИмя = "_AccountDtRRef" Тогда
		Поле.Имя = "СчетДт";
	ИначеЕсли Поле.ФизическоеИмя = "_AccountCtRRef" Тогда
		Поле.Имя = "СчетКт";	
	ИначеЕсли СтрНачинаетсяС(Поле.ФизическоеИмя, "_Value") > 0 Тогда
       	Поле.Имя = СтрШаблон("%1%2", "Субконто", Сред(Поле.ФизическоеИмя, 7, СтрНайти(Поле.ФизическоеИмя, "_", , 6) - 7));
	ИначеЕсли СтрНайти(Поле.ФизическоеИмя, "_TurnoverCt") > 0 Тогда
		Поле.Имя = Поле.Имя + "ОборотКт";
	ИначеЕсли  СтрНайти(Поле.ФизическоеИмя, "_TurnoverDt") > 0 Тогда     
		Поле.Имя = Поле.Имя + "ОборотДт";
	ИначеЕсли  СтрНайти(Поле.ФизическоеИмя, "_Turnover") > 0 Тогда     
		Поле.Имя = Поле.Имя + "Оборот";
	КонецЕсли;						
		
	Рез = Новый Соответствие;
	Если СтрНайти(Поле.ФизическоеИмя, "_Node") > 0 Тогда   
		Суффикс = Прав(Поле.ФизическоеИмя, 4);
		Если Суффикс = "TRef" Тогда 
			Рез.Вставить(Поле.ФизическоеИмя, "УзелПлат_ИдТабСсылки");
		ИначеЕсли Суффикс = "RRef" Тогда 
			Рез.Вставить(Поле.ФизическоеИмя, "УзелПлат");
		Иначе 
			Рез.Вставить(Поле.ФизическоеИмя, Поле.Имя);
		КонецЕсли;	
		Возврат Рез;
	ИначеЕсли СтрНайти(Поле.ФизическоеИмя, "_MessageNo") > 0 Тогда   
		Рез = Новый Соответствие;
		Рез.Вставить(СтрЗаменить(Поле.ФизическоеИмя,"RRef",""),"НомерСообщения");
		Возврат Рез;
	ИначеЕсли СтрНайти(Поле.ФизическоеИмя, "_ConstID") > 0 Тогда   
		Рез = Новый Соответствие;
		Рез.Вставить(СтрЗаменить(Поле.ФизическоеИмя,"RRef",""),"Значение");
		Возврат Рез;
	КонецЕсли;					

	Рез.Вставить(Поле.ФизическоеИмя, СтрШаблон("%1%2"
												, ?(ЗначениеЗаполнено(Поле.Имя), Поле.Имя, Поле.ФизическоеИмя)
												, ПолучитьСуффиксПоИмени(Поле.ФизическоеИмя)));
	
	Возврат Рез;
	
КонецФункции

Функция ДобавитьЗаписьОТипе(ИмяТаблицы,МетаданныеОбъекта,ТипОбъекта,СсылкаНаЭкземплярОбъекта)
	IDОбъекта = ПолучитьКодТипаОбъекта(ЗначениеВСтрокуВнутр(СсылкаНаЭкземплярОбъекта));		
	IDОбъектаБД = "0x" + ДесятичноеЧислоВШестнадцатиричнуюСтроку(Число(IDОбъекта), 8);	
	
	ТекстЗапроса = "INSERT INTO " + ИмяТаблицы +" VALUES ("	
					+ IDОбъекта	+ ", " 
					+ "'" + ТипОбъекта + "'" + ", "		
					+ IDОбъектаБД + ", " 
					+ "'" + МетаданныеОбъекта.Имя + "'" + ", " 
					+ "'" + МетаданныеОбъекта.Синоним + "'" + ")";	
	Возврат ТекстЗапроса;
КонецФункции

Функция ДесятичноеЧислоВШестнадцатиричнуюСтроку(ДесятичноеЧисло, ДлинаШестн)
	ШеснадцатиричныеСимволы = "0123456789abcdef";	
	ШестнСтрока = "";
	Символов = 0;
	Пока ДесятичноеЧисло>0 или Символов<ДлинаШестн Цикл				
		ПоследяяШестнЦифра = ДесятичноеЧисло % 16 + 1; 
		ШестнСтрока = Сред(ШеснадцатиричныеСимволы, ПоследяяШестнЦифра, 1) + ШестнСтрока;
		ДесятичноеЧисло = Цел(ДесятичноеЧисло / 16);		
		Символов = Символов + 1;
	КонецЦикла;
	Возврат ШестнСтрока;
КонецФункции

Функция ПолучитьКодТипаОбъекта(СтрокаВнутр)
	КонецКороткогоКода = СтрНайти(СтрокаВнутр,":");
	Возврат Сред(СтрокаВнутр,43,КонецКороткогоКода-43);	
КонецФункции

Функция ПолучитьСуффиксПоИмени(ФизическоеИмя)
	
	Суффикс = Прав(ФизическоеИмя, 4); 
	Суффикс2 = Прав(ФизическоеИмя, 2);
	Если Суффикс = "TYPE" Тогда 
		СуфРез = "_Тип";
	ИначеЕсли Суффикс = "TRef" Тогда 
		СуфРез = "_ИдТабСсылки";
	ИначеЕсли Суффикс2 = "_S" Тогда 
		СуфРез = "_ТипСтрока";
	ИначеЕсли Суффикс2 = "_N" Тогда 
		СуфРез = "_ТипЧисло";
	ИначеЕсли Суффикс2 = "_T" Тогда 
		СуфРез = "_ТипДата";
	ИначеЕсли Суффикс2 = "_L" Тогда 
		СуфРез = "_ТипБулево";
	Иначе 
		СуфРез = "";
	КонецЕсли;
	
	Возврат СуфРез;
				
КонецФункции

Функция СоздатьТаблицуПоляТаблиц()
	
	ПоляТаблиц = Новый ТаблицаЗначений;
	ПоляТаблиц.Колонки.Добавить("Имя");
	ПоляТаблиц.Колонки.Добавить("ФизическоеИмя");
	ПоляТаблиц.Колонки.Добавить("Типы");

	Возврат ПоляТаблиц;
	
КонецФункции	        

Функция СоздатьТаблицуСоставаПолей()
	
	СоставПолей = Новый ТаблицаЗначений;
	СоставПолей.Колонки.Добавить("Имя");
	СоставПолей.Колонки.Добавить("Тип");
	
	Возврат СоставПолей;
	
КонецФункции

Процедура ДобавитьПолеВТаблицуСоставаПолей(ПолноеИмяОбъектаМетаданных, ТаблицаСоставаПолей, Знач СписокСвойств)
	
	МассивСвойств = Новый Массив;
	ПозицияРазделителя = СтрНайти(СписокСвойств, ";");
	Пока ПозицияРазделителя > 0 Цикл 
		Свойство = Лев(СписокСвойств, ПозицияРазделителя - 1);
		МассивСвойств.Добавить(Свойство);
		СписокСвойств = Сред(СписокСвойств, ПозицияРазделителя + 1, 99999999999999999999999999999);
		ПозицияРазделителя = СтрНайти(СписокСвойств, ";");	
	КонецЦикла;
	МассивСвойств.Добавить(СписокСвойств);
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);	
	Для Каждого Свойство Из МассивСвойств Цикл 
		Для Каждого Поля Из ОбъектМетаданных[Свойство] Цикл
			Новое = ТаблицаСоставаПолей.Добавить();
			Новое.Имя = Поля.Имя;
			Если Свойство = "Графы" Тогда 
				Новое.Тип = Поля.Ссылки; 					
			Иначе 	
				Новое.Тип = Поля.Тип; 
			КонецЕсли;
		КонецЦикла;	 		
	КонецЦикла;			 

КонецПроцедуры

Функция СформироватьТаблицуПоляТаблиц(Таблицы, Строка)

	ПоляТаблиц = Новый ТаблицаЗначений;
	ПоляТаблиц.Колонки.Добавить("Имя");
	ПоляТаблиц.Колонки.Добавить("ФизическоеИмя");	
	Для Каждого ПолеХранения из Строка.Поля Цикл
		Поле = ПоляТаблиц.Добавить(); 
		Если ЗначениеЗаполнено(ПолеХранения.ИмяПоля) Тогда 
			Поле.Имя = ПолеХранения.ИмяПоля;
		Иначе 
			Если (СтрНайти(Строка.ИмяТаблицыХранения, "CT") > 0 ИЛИ СтрНайти(Строка.ИмяТаблицыХранения, "ED") > 0) 
				И ПолеХранения.Метаданные = "" Тогда
				РезультатПоиска = Таблицы.НайтиСтроки(Новый Структура("Имя, Назначение", Строка.Метаданные, "Основная"));
				Если ТипЗнч(РезультатПоиска) = Тип("Массив") Тогда  
					ОписаниеПоляОсновнойТаблицы = РезультатПоиска[0].Поля.Найти(ПолеХранения.ИмяПоляХранения, "ФизическоеИмя");
					Если ТипЗнч(ОписаниеПоляОсновнойТаблицы) = Тип("СтрокаТаблицыЗначений") Тогда 
						Поле.Имя = ОписаниеПоляОсновнойТаблицы.Имя;
					КонецЕсли;				
				КонецЕсли;
			Иначе 
				Поле.Имя = Сред(ПолеХранения.Метаданные, СтрНайти(ПолеХранения.Метаданные, ".", НаправлениеПоиска.СКонца) + 1, 999999999999999999999);
			КонецЕсли;		
		КонецЕсли;
		Поле.ФизическоеИмя = ПолеХранения.ИмяПоляХранения; 
	КонецЦикла;  

	Если СтрНачинаетсяС(Строка.Метаданные, "Перечисление") Тогда
		// Читаем значения перечисления
		Индекс = 0;
		ТекстПоля = "CASE _EnumOrder";
		Для Каждого л_Строка Из Метаданные.НайтиПоПолномуИмени(Строка.Метаданные).ЗначенияПеречисления Цикл
			ТекстПоля = СтрШаблон("%1 WHEN %2 THEN '%3'"
			, ТекстПоля, Строка(Индекс), л_Строка.Имя);
			Индекс = Индекс + 1; 
		КонецЦикла;	
		ТекстПоля = СтрШаблон("%1 end ", ТекстПоля);
		
		Поле = ПоляТаблиц.Добавить(); 
		Поле.Имя = "Значение";
		Поле.ФизическоеИмя = ТекстПоля;
	КонецЕсли;
		
	Возврат ПоляТаблиц;
	
КонецФункции

Процедура СоздатьПредставлениеДляОбъектаМетаданных(ОбъектМетаданных, Таблицы)
	
	Объекты = Новый Массив;
	ДобавитьОбъектыМетаданныхВМассив(ОбъектМетаданных, Объекты);  
	Если Объекты.Количество() > 0 Тогда
		ТЗ = ПолучитьТаблицуЗначенийСтруктурыХраненияБазыДанных(Объекты);
		Для каждого Строка из ТЗ Цикл    
			НоваяТаблица = Таблицы.Добавить();
			НоваяТаблица.Имя = ?(ЗначениеЗаполнено(Строка.ИмяТаблицы), Строка.ИмяТаблицы, СтрШаблон("%1_%2", СтрЗаменить(Строка.Метаданные, ".", "_"), Строка.Назначение));
			НоваяТаблица.Тип = Лев(Строка.Метаданные,  СтрНайти(Строка.Метаданные, ".") - 1);			
            НоваяТаблица.Назначение = Строка.Назначение;
			НоваяТаблица.ФизическоеИмя = Строка.ИмяТаблицыХранения;
			НоваяТаблица.Поля = СформироватьТаблицуПоляТаблиц(Таблицы, Строка);
		КонецЦикла;
	КонецЕсли;	  
		
КонецПроцедуры   

Процедура СоздатьВиртуальныеТаблицыИтоговРегистраНакопления(Результат, Таблицы, Таблица, ПрефиксСхемы)
	
	ТаблицаИмя = СтрЗаменить(Таблица.Имя, ".", "_");	
	ТаблицаИтогов = Таблицы.Найти(СтрШаблон("%1%2", ТаблицаИмя, "_Итоги"), "Имя");
	ТаблицаНастройкиИтогов = Таблицы.Найти(СтрШаблон("%1%2", ТаблицаИмя, "_НастройкиХраненияИтоговРегистраНакопления") , "Имя");
	Если ТаблицаИтогов = Неопределено ИЛИ ТаблицаНастройкиИтогов = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	МД = Метаданные.НайтиПоПолномуИмени(Таблица.Имя);
	Если МД = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	FuncName = СтрШаблон("%1.%2_Остатки", ПрефиксСхемы, ТаблицаИмя);
	Результат.Добавить(СтрокаСозданияПредставленияФункции(FuncName, "FUNCTION"));
	Результат.Добавить("GO"); 
	Результат.Добавить(Символы.ПС); 	
	Результат.Добавить(СтрШаблон("ALTER FUNCTION %1(@toDate datetime) RETURNS TABLE AS RETURN (", FuncName));
	
	ИзмеренияСписок 		= Новый Массив;
	ИзмеренияСписокGroup 	= Новый Массив; 
	ИзмеренияСписокОбщ		= Новый Массив; 
	РесурсыСписок 			= Новый Массив; 
	РесурсыСписокHaving		= Новый Массив; 
	РесурсыСписокОбщ		= Новый Массив;
	Для Каждого Поле из ТаблицаИтогов.Поля Цикл
		Имена = ПолучитьСоответствиеИменПоля(Поле, ТаблицаИтогов);
		Для Каждого Ключ Из Имена Цикл
			ФизическоеИмя = Ключ.Ключ;
			Имя = Ключ.Значение;
			Если МД.Измерения.Найти(Поле.Имя) <> Неопределено Тогда
				ИзмеренияСписок.Добавить(ФизическоеИмя);
				ИзмеренияСписокОбщ.Добавить(СтрШаблон("%1 AS [%2]", ФизическоеИмя, ?(ЗначениеЗаполнено(Имя), Имя, ФизическоеИмя)));
				ИзмеренияСписокGroup.Добавить(ФизическоеИмя);
			КонецЕсли;
			Если МД.Ресурсы.Найти(Поле.Имя)<>Неопределено Тогда
				РесурсыСписок.Добавить(ФизическоеИмя);
				РесурсыСписокОбщ.Добавить(СтрШаблон("SUM(CASE WHEN _RecordKind = 0 THEN 1 ELSE -1 END * %1) AS [%2]", ФизическоеИмя, ?(ЗначениеЗаполнено(Имя), Имя, ФизическоеИмя)));
				РесурсыСписокHaving.Добавить(СтрШаблон("SUM(CASE WHEN _RecordKind = 0 THEN 1 ELSE -1 END * %1) <> 0", ФизическоеИмя));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;          
	ИзмеренияСписокGroup = СтрСоединить(ИзмеренияСписокGroup, ", ");  
	РесурсыСписокHaving = СтрСоединить(РесурсыСписокHaving, " OR ");  
	Результат.Добавить(СтрШаблон("SELECT %1, %2", СтрСоединить(ИзмеренияСписокОбщ, ", "), СтрСоединить(РесурсыСписокОбщ, ", ")));
	Результат.Добавить("FROM");
	Результат.Добавить("(");
	Результат.Добавить(СтрШаблон("%1SELECT %2, %3, 0 AS _RecordKind FROM %4%5 WITH (NOLOCK) WHERE _Period = (SELECT CASE WHEN @toDate > DATEADD(m, -1, MAX(_period)) THEN DATEADD(m, -1, MAX(_period)) ELSE DATEADD(d, -DATEPART(d, @toDate) + 1, FLOOR(CONVERT(FLOAT, @toDate))) END FROM %4%5)"
						, Символы.Таб
						, СтрСоединить(ИзмеренияСписок, ", ")
						, СтрСоединить(РесурсыСписок, ", ")
						, ПрефиксБД
						, ТаблицаИтогов.ФизическоеИмя));
	Результат.Добавить(СтрШаблон("%1%2", Символы.Таб, "UNION ALL"));
	
	ИзмеренияСписок 		= Новый Массив;
	РесурсыСписок 			= Новый Массив; 
	Для Каждого Поле из Таблица.Поля Цикл
		Имена = ПолучитьСоответствиеИменПоля(Поле,Таблица);
		Для Каждого Ключ Из Имена Цикл
			ФизическоеИмя = Ключ.Ключ;
			Имя = Ключ.Значение;
			Если МД.Измерения.Найти(Поле.Имя) <> Неопределено Тогда
				ИзмеренияСписок.Добавить(ФизическоеИмя);
			КонецЕсли;
			Если МД.Ресурсы.Найти(Поле.Имя) <> Неопределено Тогда
				РесурсыСписок.Добавить(ФизическоеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Результат.Добавить(СтрШаблон("%1SELECT %2, %3, _RecordKind FROM %4%5 WITH (NOLOCK) WHERE _Period >= (SELECT CASE WHEN @toDate > DATEADD(m, -1, MAX(_period)) then DATEADD(m, -1, MAX(_period)) ELSE DATEADD(d, -DATEPART(d, @toDate) + 1, FLOOR(CONVERT(FLOAT, @toDate))) END FROM %4%5) AND _Period<=@toDate"
								, Символы.Таб
								, СтрСоединить(ИзмеренияСписок, ", ")
								, СтрСоединить(РесурсыСписок, ", ")
								, ПрефиксБД
								, Таблица.ФизическоеИмя));
	Результат.Добавить(") ost");
	Результат.Добавить(СтрШаблон("GROUP BY %1", ИзмеренияСписокGroup));	  
	Результат.Добавить(СтрШаблон("HAVING %1", РесурсыСписокHaving));	
	Результат.Добавить(")");
	Результат.Добавить("GO");
	Результат.Добавить(Символы.ПС); 	
	
КонецПроцедуры

Процедура СоздатьВиртуальныеТаблицыИтоговРегистраСведений(Результат, Таблицы, Таблица, ПрефиксСхемы)
	
	МД = Метаданные.НайтиПоПолномуИмени(Таблица.Имя);
	Если МД.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		Возврат;
	КонецЕсли;

	ТаблицаИмя = СтрЗаменить(Таблица.Имя, ".", "_");		
	
	СоздатьСрезРегистраСведений(Результат, Таблицы, Таблица, ТаблицаИмя, ПрефиксСхемы, МД, "СрезПоследних");
	СоздатьСрезРегистраСведений(Результат, Таблицы, Таблица, ТаблицаИмя, ПрефиксСхемы, МД, "СрезПервых");

КонецПроцедуры    

Процедура СоздатьСрезРегистраСведений(Результат, Таблицы, Таблица
										, ТаблицаИмя, ПрефиксСхемы, МД
										, Срез)
										
	Если Срез = "СрезПоследних" Тогда 
		ФункцияАгрегирования = "MAX";
	ИначеЕсли Срез = "СрезПервых" Тогда  	
		ФункцияАгрегирования = "MIN";
	Иначе 
		Возврат;
	КонецЕсли;	
	
	FuncName = СтрШаблон("%1.%2_%3", ПрефиксСхемы, ТаблицаИмя, Срез);
	Результат.Добавить(СтрокаСозданияПредставленияФункции(FuncName, "FUNCTION"));
	Результат.Добавить("GO"); 
	Результат.Добавить(Символы.ПС); 	
	Результат.Добавить(СтрШаблон("ALTER FUNCTION %1(@toDate datetime) RETURNS TABLE AS RETURN (", FuncName));
	ИзмеренияСписок = Новый Массив; 
	ИзмеренияJoin = Новый Массив; 
	ПоляСписок = Новый Массив;
	
	Для Каждого Поле из Таблица.Поля Цикл
		Имена = ПолучитьСоответствиеИменПоля(Поле,Таблица);
		Для Каждого Ключ Из Имена Цикл
			ФизическоеИмя = Ключ.Ключ;
			Имя = Ключ.Значение;
			Если МД.Измерения.Найти(Поле.Имя)<>Неопределено Тогда
				ИзмеренияСписок.Добавить(ФизическоеИмя);
				ИзмеренияJoin.Добавить(СтрШаблон(" and rg%2.%1 = rg.%1", ФизическоеИмя, ФункцияАгрегирования));
			КонецЕсли;
			ПоляСписок.Добавить(СтрШаблон("rg.%1 AS [%2]", ФизическоеИмя, ?(ЗначениеЗаполнено(Имя), Имя, ФизическоеИмя)));
		КонецЦикла;
	КонецЦикла;    
	ИзмеренияСписок = СтрСоединить(ИзмеренияСписок, ", "); 
	ИзмеренияJoin = СтрСоединить(ИзмеренияJoin, ""); 
	Результат.Добавить(СтрШаблон("SELECT %1",  СтрСоединить(ПоляСписок, ", ")));
	Результат.Добавить("FROM (");	
	Результат.Добавить(СтрШаблон("SELECT %1 %2(_Period) _Period FROM %3%4 WITH (NOLOCK) WHERE _Period<=@toDate%5) rg%2 INNER JOIN %3%4 rg WITH (NOLOCK) ON rg%2._Period = rg._Period%6"
	                   				, СтрШаблон("%1%2", ИзмеренияСписок, ?(ПустаяСтрока(ИзмеренияСписок), "", ", "))
									, ФункцияАгрегирования
									, ПрефиксБД
									, Таблица.ФизическоеИмя
									, ?(ПустаяСтрока(ИзмеренияСписок),""," GROUP BY " + ИзмеренияСписок)
									, ИзмеренияJoin));
	Результат.Добавить(СтрШаблон("%1)", Символы.Таб));
	Результат.Добавить("GO" + Символы.ПС);   

КонецПроцедуры

Процедура СоздатьВиртуальныеТаблицыИтоговРегистровБухгалтерии(Результат, ПрефиксСхемы)
	
	//legacy устаревший метод соединения строк
	
	//Создание view остатки и обороты по регистрам бухгалтерии
	Для Каждого Элемент из Метаданные.РегистрыБухгалтерии Цикл 	 
		//Таблица Движения с Субконто
		SQL1 = "SELECT reg.Период
		|	,reg.Регистратор_ИдТабСсылки
		|	,reg.Регистратор
		|	,reg.СчетДт
		|	,reg.СчетКт";
		Для каждого Измерение Из Элемент.Измерения Цикл
			Если Измерение.Балансовый Тогда
				SQL1 = SQL1 + "
				|	,reg." + Измерение.Имя;
			Иначе
				SQL1 = SQL1 + "
				|	,reg." + Измерение.Имя + "Дт
				|	,reg." + Измерение.Имя + "Кт";
			Конецесли;	
		Конеццикла;	
		SQL2 = "";
		Для каждого Ресурс из Элемент.Ресурсы Цикл
			Если Ресурс.Балансовый Тогда
				SQL1 = SQL1 + "
				|	,reg." + Ресурс.Имя;
			Иначе
				SQL1 = SQL1 + "
				|	,reg." + Ресурс.Имя + "Дт
				|	,reg." + Ресурс.Имя + "Кт";
			Конецесли;	
		Конеццикла;		
		ПланСчетов = Элемент.ПланСчетов;
		
		SQL3 = "
		|FROM РегистрБухгалтерии_" + Элемент.Имя + " reg
		|	left join ПланСчетов_" + ПланСчетов.Имя + " chDt on chDt.Ссылка = reg.СчетДт
		|	left join ПланСчетов_" + ПланСчетов.Имя + " chKt on chKt.Ссылка = reg.СчетКт";
		
		Для сч = 1 по ПланСчетов.МаксКоличествоСубконто Цикл
			ViewName = ПрефиксСхемы + ".РегистрБухгалтерии_" + Элемент.Имя + "_ДвиженияССубконто" + сч;
			Результат.Добавить("if object_id('" + ViewName + "') is null exec ('create view " + ViewName + " as select 0 fld0')");
			Результат.Добавить("GO" + Символы.ПС);
			
			КомандаТаблицаВставить = "ALTER VIEW " + ViewName + " AS"; 
			Результат.Добавить(КомандаТаблицаВставить);
			
			SQL1_1 = SQL1;
			SQL3_1 = SQL3;
			Для сч1 = 1 по Сч Цикл
				SQL1_1 = SQL1_1 + "
				|	,cbkDt" + сч1 + ".Субконто_ИдТабСсылки AS СубконтоДт" + сч1 + "_ИдТабСсылки
				|	,cbkDt" + сч1 + ".Субконто AS СубконтоДт" + сч1 + "
				|	,cbkKt" + сч1 + ".Субконто_ИдТабСсылки AS СубконтоКт" + сч1 + "_ИдТабСсылки
				|	,cbkKt" + сч1 + ".Субконто AS СубконтоКт" + сч1 + "";
				
				SQL3_1 = SQL3_1 + "
				|	left join ПланСчетов_" + ПланСчетов.Имя + "_ВидыСубконто chDtcb" + сч1 + " on chDt.Ссылка = chDtcb" + сч1 + ".Ссылка and chDtcb" + сч1 + ".НомерСтроки = " + сч1 + "
				|	left join РегистрБухгалтерии_" + ПланСчетов.Имя + "_Субконто cbkDt" + сч1 + " on 
				|		cbkDt" + сч1 + ".Период = reg.Период
				|		and cbkDt" + сч1 + ".Регистратор_ИдТабСсылки = reg.Регистратор_ИдТабСсылки
				|		and cbkDt" + сч1 + ".Регистратор = reg.Регистратор
				|		and cbkDt" + сч1 + ".НомерСтроки = reg.НомерСтроки
				|		and cbkDt" + сч1 + ".Период = reg.Период
				|		and cbkDt" + сч1 + ".ВидДвижения = 0
				|		and cbkDt" + сч1 + ".Субконто = chDtcb" + сч1 + ".ВидСубконто
				|	left join ПланСчетов_" + ПланСчетов.Имя + "_ВидыСубконто chKtcb" + сч1 + " on chKt.Ссылка = chKtcb" + сч1 + ".Ссылка and chKtcb" + сч1 + ".НомерСтроки = " + сч1 + "
				|	left join РегистрБухгалтерии_" + ПланСчетов.Имя + "_Субконто cbkKt" + сч1 + " on 
				|		cbkKt" + сч1 + ".Период = reg.Период
				|		and cbkKt" + сч1 + ".Регистратор_ИдТабСсылки = reg.Регистратор_ИдТабСсылки
				|		and cbkKt" + сч1 + ".Регистратор = reg.Регистратор
				|		and cbkKt" + сч1 + ".НомерСтроки = reg.НомерСтроки
				|		and cbkKt" + сч1 + ".Период = reg.Период
				|		and cbkKt" + сч1 + ".ВидДвижения = 1
				|		and cbkKt" + сч1 + ".Субконто = chKtcb" + сч1 + ".ВидСубконто";
			Конеццикла;
			
			Результат.Добавить(SQL1_1 + SQL2 + SQL3_1);
			Результат.Добавить("GO" + Символы.ПС);
			
		Конеццикла;	
		
		//Остатки
		Для сч = 1 по ПланСчетов.МаксКоличествоСубконто Цикл
			SQLX = "";
			SQLX1 = "";
			SQLX2 = "";
			Для каждого Измерение Из Элемент.Измерения Цикл
				Если Измерение.Балансовый Тогда
					SQLX = SQLX + ",@" + Измерение.Имя + " binary(16)";
					SQLX1 = SQLX1 + " and " + Измерение.Имя + " = @" + Измерение.Имя + "";
					SQLX2 = SQLX2 + ",@" + Измерение.Имя;
				КонецЕсли;	
			КонецЦикла;
			
			
			FuncName = ПрефиксСхемы + ".РегистрБухгалтерии_" + Элемент.Имя + "_ОстаткиССубконто" + сч + "Ex";
			Результат.Добавить("if object_id('" + FuncName + "') is null exec ('create function " + FuncName + "(@toDate datetime,@toMonth datetime,@Account binary(16)" + SQLX + ") returns table as return (select 1 fld0)')");
			Результат.Добавить("GO" + Символы.ПС);
			
			Результат.Добавить("ALTER FUNCTION " + FuncName + "(@toDate datetime,@toMonth datetime,@Account binary(16)" + SQLX + ") returns table as return (");
			
			SQL1 = "";
			SQL2 = "";
			SQL3 = "";
			SQL1_Ost = "";
			SQL1_Dt = "";
			SQL1_Kt = "";
			
			Для каждого Измерение Из Элемент.Измерения Цикл
				SQL1 = ?(SQL1 = "","",SQL1 + "
				| ,") + Измерение.Имя;
				SQL1_Ost = ?(SQL1_Ost = "","SELECT ",SQL1_Ost + "
				| 	,") + Измерение.Имя;
				
				Если Измерение.Балансовый Тогда
					SQL1_Dt = ?(SQL1_Dt = "","SELECT ", SQL1_Dt + "
					| 	,") + "reg." + Измерение.Имя;
					SQL1_Kt = ?(SQL1_Kt = "","SELECT ", SQL1_Kt + "
					| 	,") + "reg." + Измерение.Имя;
				Иначе
					SQL1_Dt = ?(SQL1_Dt = "","SELECT ", SQL1_Dt + "
					| 	,") + "reg." + Измерение.Имя + "Дт";
					SQL1_Kt = ?(SQL1_Kt = "","SELECT ", SQL1_Kt + "
					| 	,") + "reg." + Измерение.Имя + "Кт";
				Конецесли;	
			Конеццикла;	
			
			Для сч1 = 1 По сч Цикл
				SQL1 = SQL1 + "
				| ,Субконто" + сч1 + "_ИдТабСсылки
				| ,Субконто" + сч1 + "";
				SQL1_Ost = SQL1_Ost + "
				| 	,Субконто" + сч1 + "_ИдТабСсылки as Субконто" + сч1 + "_ИдТабСсылки
				| 	,Субконто" + сч1 + " as Субконто" + сч1;
				SQL1_Dt = SQL1_Dt + "
				| 	,СубконтоДт" + сч1 + "_ИдТабСсылки
				| 	,СубконтоДт" + сч1 + "";
				SQL1_Kt = SQL1_Kt + "
				| 	,СубконтоКт" + сч1 + "_ИдТабСсылки
				| 	,СубконтоКт" + сч1 + "";
			Конеццикла;	
			
			Для каждого Ресурс из Элемент.Ресурсы Цикл
				SQL2 = SQL2 + "
				| ," + "SUM(" + Ресурс.Имя + ") as " + Ресурс.Имя;
				SQL3 = SQL3 + "
				| ," + Ресурс.Имя;
				SQL1_Ost = ?(SQL1_Ost = "","SELECT ",SQL1_Ost + "
				| 	,") + Ресурс.Имя;
				
				Если Ресурс.Балансовый Тогда
					SQL1_Dt = ?(SQL1_Dt = "","SELECT ", SQL1_Dt + "
					| 	,") + "reg." + Ресурс.Имя;
					SQL1_Kt = ?(SQL1_Kt = "","SELECT ", SQL1_Kt + "
					| 	,") + "-reg." + Ресурс.Имя;
				Иначе
					SQL1_Dt = ?(SQL1_Dt = "","SELECT ", SQL1_Dt + "
					| 	,") + "reg." + Ресурс.Имя + "Дт";
					SQL1_Kt = ?(SQL1_Kt = "","SELECT ", SQL1_Kt + "
					| 	,") + "-reg." + Ресурс.Имя + "Кт";
				Конецесли;	
			Конеццикла;		
			
			SQL = "SELECT " + SQL1 + SQL2 + "
			|	FROM (" + SQL1_Ost + "
			|		FROM РегистрБухгалтерии_" + Элемент.Имя + "_ИтогиПоСчетамССубконто" + сч + " reg
			|	WHERE Счет = @Account
			|		and Период = @toMonth
			|		" + SQLX1 + "
			|	UNION ALL
			|	" + SQL1_Dt + "
			|	FROM РегистрБухгалтерии_" + Элемент.Имя + "_ДвиженияССубконто" + сч + " reg
			|	WHERE Период > @toMonth
			|		and Период <= @toDate
			|		and СчетДт = @Account
			|		" + SQLX1 + "
			|	UNION ALL
			|	" + SQL1_Kt + "
			|	FROM РегистрБухгалтерии_" + Элемент.Имя + "_ДвиженияССубконто" + сч + " reg
			|	WHERE Период > @toMonth
			|		and Период <= @toDate
			|		and СчетКт = @Account
			|		" + SQLX1 + "
			|	) reg
			|	GROUP BY " + SQL1 + "
			|";
			
			Результат.Добавить(SQL);
			
			
			Результат.Добавить(")");
			Результат.Добавить("GO" + Символы.ПС);
			
			FuncName1 = ПрефиксСхемы + ".РегистрБухгалтерии_" + Элемент.Имя + "_ОстаткиССубконто" + сч + "";
			Результат.Добавить("if object_id('" + FuncName1 + "') is null exec ('create function " + FuncName1 + "(@toDate datetime,@Account nvarchar(8)" + SQLX + ") returns table as return (select 1 fld0)')");
			Результат.Добавить("GO" + Символы.ПС);
			
			Результат.Добавить("ALTER FUNCTION " + FuncName1 + "(@toDate datetime,@Account nvarchar(8)" + SQLX + ") returns table as return (");
			Результат.Добавить("SELECT " + SQL1 + SQL3 + " FROM " + FuncName + "(@toDate
			|	,(SELECT MAX(Период) FROM РегистрБухгалтерии_" + Элемент.Имя + "_ИтогиПоСчетам WHERE Период <= @toDate) 
			|	,(SELECT TOP 1 Ссылка FROM ПланСчетов_" + ПланСчетов.Имя + " WHERE Код = @Account)" + SQLX2 + ") reg");
			Результат.Добавить(")");
			Результат.Добавить("GO" + Символы.ПС);
		КонецЦикла;	
	КонецЦикла;	 
	
КонецПроцедуры

Функция СтрокаСозданияПредставленияФункции(ИмяПредставления, ТипПредставления)
	Если ТипПредставления = "FUNCTION" Тогда 
		Возврат СтрШаблон("IF OBJECT_ID('%1') IS NULL EXEC ('CREATE FUNCTION %1(@toDate datetime) RETURNS TABLE AS RETURN (SELECT 1 AS fld0)')", ИмяПредставления);	
	ИначеЕсли ТипПредставления = "VIEW" Тогда  
		Возврат СтрШаблон("IF OBJECT_ID('%1') IS NULL EXEC ('CREATE VIEW %1 AS SELECT 1 AS fld0')", ИмяПредставления);	
	КонецЕсли;	
КонецФункции     

Процедура ЗаполнитьПредставлениеПоОписанию(Описание, Результат)
	
	ViewName = СтрШаблон("%1.%2", ПрефиксСхемы, СтрЗаменить(Описание.Имя, ".", "_")); 
	Результат.Добавить(СтрокаСозданияПредставленияФункции(ViewName, "VIEW"));
	Результат.Добавить("GO");
	Результат.Добавить(Символы.ПС);
	
	КомандаТаблицаВставить = "ALTER VIEW " + ViewName + " AS"; 
	Результат.Добавить(СтрШаблон("ALTER VIEW %1 AS", ViewName));
	Результат.Добавить("SELECT");
	КомандаПолеВставить = Новый Массив;
	Для Каждого Поле из Описание.Поля Цикл
		Для Каждого Имя Из ПолучитьСоответствиеИменПоля(Поле, Описание) Цикл
			КомандаПолеВставить.Добавить(СтрШаблон("%1 AS [%2]", Имя.Ключ, ?(ЗначениеЗаполнено(Имя.Значение), Имя.Значение, Имя.Ключ)));
		КонецЦикла;
	КонецЦикла;
	Результат.Добавить(СтрСоединить(КомандаПолеВставить, ", "));
	
	Результат.Добавить(СтрШаблон("FROM %1%2 WITH (NOLOCK)", ПрефиксБД, Описание.ФизическоеИмя));
	Результат.Добавить("GO");  
	Результат.Добавить(Символы.ПС);
		
КонецПроцедуры

#КонецОбласти

#Иначе
  ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли

